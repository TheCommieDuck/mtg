========================================


========================================

haskellPackages.shellFor

    # Returns a derivation whose environment contains a GHC with only
    # the dependencies of packages listed in `packages`, not the
    # packages themselves. 
    #
    #     # default.nix
    #     with import <nixpkgs> {};
    #     haskellPackages.extend (haskell.lib.packageSourceOverrides {
    #       frontend = ./frontend;
    #       backend = ./backend;
    #       common = ./common;
    #     })
    #
    #     # shell.nix
    #     (import ./.).shellFor {
    #       packages = p: [p.frontend p.backend p.common];
    #       withHoogle = true;
    #     }
    #
    #     -- cabal.project
    #     packages:
    #       frontend/
    #       backend/
    #       common/
    #
    #     bash$ nix-shell --run "cabal new-build all"

    shellFor = { packages, withHoogle ? false, ... } @ args:

      let

        selected = packages self;

        packageInputs = builtins.map getHaskellBuildInputs selected;

        haskellInputs =
          builtins.filter
            (input: pkgs.lib.all (p: input.outPath != p.outPath) selected)
            (pkgs.lib.concatMap (p: p.haskellBuildInputs) packageInputs);

        systemInputs = pkgs.lib.concatMap (p: p.systemBuildInputs) packageInputs;

        withPackages = if withHoogle then self.ghcWithHoogle else self.ghcWithPackages;

        mkDrvArgs = builtins.removeAttrs args ["packages" "withHoogle"];

      in
       pkgs.stdenv.mkDerivation (mkDrvArgs // {

        name = "ghc-shell-for-packages";
        nativeBuildInputs = [(withPackages (_: haskellInputs))] ++ mkDrvArgs.nativeBuildInputs or [];
        buildInputs = systemInputs ++ mkDrvArgs.buildInputs or [];
        phases = ["installPhase"];
        installPhase = "echo $nativeBuildInputs $buildInputs > $out";

      });

    ghc = ghc // {
      withPackages = self.ghcWithPackages;
      withHoogle = self.ghcWithHoogle;
    };


========================================

haskellPackages.developPackage

    # : { root : Path
    #   , source-overrides : Defaulted (Either Path VersionNumber)
    #   , overrides : Defaulted (HaskellPackageOverrideSet)
    #   , modifier : Defaulted
    #   , returnShellEnv : Defaulted
    #   } -> NixShellAwareDerivation
    # Given a path to a haskell package directory whose cabal file is
    # named the same as the directory name, an optional set of
    # source overrides as appropriate for the 'packageSourceOverrides'
    # function, an optional set of arbitrary overrides, and an optional
    # haskell package modifier,  return a derivation appropriate
    # for nix-build or nix-shell to build that package.

    developPackage =
      { root
      , source-overrides ? {}
      , overrides ? self: super: {}
      , modifier ? drv: drv
      , returnShellEnv ? pkgs.lib.inNixShell 
      }:

      let drv =
        (extensible-self.extend
           (pkgs.lib.composeExtensions
              (self.packageSourceOverrides source-overrides)
              overrides))
        .callCabal2nix (builtins.baseNameOf root) root {};
      in if returnShellEnv then (modifier drv).env else modifier drv;

    ghcWithPackages = selectFrom: withPackages (selectFrom self);

    ghcWithHoogle = selectFrom:
      let
        packages = selectFrom self;
        hoogle = callPackage ./hoogle.nix {
          inherit packages;
        };
      in withPackages (packages ++ [ hoogle ]);



========================================