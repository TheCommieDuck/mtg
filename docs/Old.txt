==============================================




{-

  format "CREATE TYPE %s AS ENUM ( %s );" name labels

   [ "CREATE TYPE"
  , docLabels 
  , "AS ENUM"
  , " ("
  , docLabels 
  , " );"
  ]

  go
    = PP.align
    . PP.sep
    . List.zipWith (<+>) (List.repeat ", ")

type SQLDoc = PP.Doc SQLAnnotation

data SQLAnnotation

  = SQLKeyword 
  | SQLString 
  | SQLComment 
  | SQLEnumName 
  | SQLEnumLabel 

PP.ANSI.bold
PP.ANSI.italicized
PP.ANSI.underlined

PP.ANSI.colorDull

-- The 8 ANSI terminal colors:

enum Color

Black	 
Red	 
Green	 
Yellow	 
Blue	 
Magenta	 
Cyan	 
White	 




-}



==============================================

annotateKeyword :: String -> SQLDoc
annotateKeyword s = PP.annotate (Just SQLKeyword) (PP.pretty s)

annotateString :: String -> SQLDoc
annotateString s = PP.annotate (Just SQLString) (PP.pretty s)

annotateType :: String -> SQLDoc
annotateType s = PP.annotate (Just SQLType) (PP.pretty s)

annotateComment :: String -> SQLDoc
annotateComment s = PP.annotate (Just SQLComment) (PP.pretty s)

annotateLiteral :: String -> SQLDoc
annotateLiteral s = PP.annotate (Just SQLLiteral) (PP.pretty s)


>>> sql_CREATE_rgb = sql_CREATE_TYPE_AS_ENUM SQLCreateEnum{ enumName = "rgb", enumLabels = [ "r", "g", "b" ] }
>>> sql_CREATE_rgb
CREATE TYPE rgb AS ENUM ('r', 'g', 'b');


PP.SimpleDocStream

(Just PP.defaultLayoutOptions{ = })



>>> sql_CREATE_color layout = sql_CREATE_TYPE_AS_ENUM layout SQLCreateEnum{ enumName = "color", enumLabels = [ "white", "blue", "black", "red", "green" ] }
>>> Prelude.putStrLn (sql_CREATE_color Nothing)
CREATE TYPE color AS ENUM ('white', 'blue', 'black', 'red', 'green');
>>> Prelude.putStrLn (sql_CREATE_color (Just PP.LayoutOptions { PP.layoutPageWidth = PP.AvailablePerLine 30 1.0 }))
CREATE TYPE color AS ENUM ( 'white',
                            'blue',
                            'black',
                            'red',
                            'green' );






extensions = 

    "AutoDeriveTypeable\ 
     BangPatterns\ 
     CPP\ 
     ConstraintKinds\ 
     DataKinds\ 
     DefaultSignatures\ 
     DeriveAnyClass\ 
     DeriveAnyClass\ 
     DeriveDataTypeable\ 
     DeriveDataTypeable\ 
     DeriveFoldable\ 
     DeriveFunctor\ 
     DeriveGeneric\ 
     DeriveGeneric\ 
     DeriveLift\ 
     DeriveTraversable\ 
     DerivingStrategies\
     DerivingStrategies\ 
     DoAndIfThenElse\ 
     DuplicateRecordFields\ 
     EmptyCase\ 
     EmptyDataDecls\ 
     ExplicitNamespaces\ 
     FlexibleContexts\ 
     FlexibleContexts\ 
     FlexibleInstances\ 
     FlexibleInstances\ 
     FunctionalDependencies\ 
     GADTs\ 
     GeneralizedNewtypeDeriving\ 
     InstanceSigs\ 
     KindSignatures\ 
     KindSignatures\ 
     LambdaCase\ 
     LambdaCase\ 
     MultiParamTypeClasses\ 
     MultiWayIf\ 
     NamedFieldPuns\ 
     NoImplicitPrelude\ 
     NoImplicitPrelude\ 
     PackageImports\ 
     PackageImports\ 
     PatternSynonyms\ 
     PostfixOperators\ 
     RankNTypes\ 
     RecordWildCards\ 
     ScopedTypeVariables \ 
     ScopedTypeVariables\ 
     StandaloneDeriving\ 
     TupleSections\ 
     TupleSections\ 
     TypeFamilies\ 
     TypeFamilies\ 
     TypeOperators\ 
     TypeOperators\ 
     UndecidableInstances\ 
     ViewPatterns"











--------------------------------------------------

extensions2flags :: [String] -> [String]
extensions2flags = fmap go . filterBlanks
  where

  go s = if (not (null s)) then ("-X" ++ s) else










>>> sql_CREATE_color layout = sql_CREATE_TYPE_AS_ENUM layout SQLCreateEnum{ enumName = "color", enumLabels = [ "white", "blue", "black", "red", "green" ] }
>>> Prelude.putStrLn (sql_CREATE_color Nothing)
CREATE TYPE color AS ENUM ( 'white', 'blue', 'black', 'red', 'green' );
>>> Prelude.putStrLn (sql_CREATE_color (Just PP.LayoutOptions { PP.layoutPageWidth = PP.AvailablePerLine 30 1.0 }))
CREATE TYPE color AS ENUM ( 'white',
                            'blue',
                            'black',
                            'red',
                            'green' );








